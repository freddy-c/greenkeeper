// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id              String           @id @default(uuid())
  name            String
  manufacturer    Manufacturer     @relation(fields: [manufacturerId], references: [id])
  manufacturerId  String
  distributors    Distributor[]
  Item            Item[]
  type            ProductType
  form            FormType
  Fertilizer      Fertilizer?
  WettingAgent    WettingAgent?
  Herbicide       Herbicide?
  Fungicide       Fungicide?
  GrowthRegulator GrowthRegulator?
  Granular        Granular?
  Liquid          Liquid?
  Soluble         Soluble?
}

model Fertilizer {
  id           String  @id @default(uuid())
  productId    String  @unique
  product      Product @relation(fields: [productId], references: [id])
  nitrogen     Float
  potassium    Float
  phosphorus   Float
  calcium      Float
  magnesium    Float
  sulfur       Float
  iron         Float
  manganese    Float
  longevity    Int
  turfResponse Int
}

model WettingAgent {
  id        String  @id @default(uuid())
  productId String  @unique
  product   Product @relation(fields: [productId], references: [id])
}

model Weed {
  id         String      @id @default(uuid())
  name       String
  herbicides Herbicide[]
}

model Herbicide {
  id                  String                     @id @default(uuid())
  productId           String                     @unique
  product             Product                    @relation(fields: [productId], references: [id])
  maxIndividualRate   Float
  maxNoOfApplications Int
  weedsControlled     Weed[]
  activeSubstances    HerbicideActiveSubstance[]
}

model Disease {
  id         String      @id @default(uuid())
  name       String
  fungicides Fungicide[]
}

model Fungicide {
  id                 String                     @id @default(uuid())
  productId          String                     @unique
  product            Product                    @relation(fields: [productId], references: [id])
  diseasesControlled Disease[]
  activeSubstances   FungicideActiveSubstance[]
}

model GrowthRegulator {
  id        String  @id @default(uuid())
  productId String  @unique
  product   Product @relation(fields: [productId], references: [id])
}

model HerbicideActiveSubstance {
  activeSubstance   ActiveSubstance @relation(fields: [activeSubstanceId], references: [id])
  activeSubstanceId String
  herbicide         Herbicide       @relation(fields: [herbicideId], references: [id])
  herbicideId       String
  quantity          Float

  @@id([activeSubstanceId, herbicideId])
}

model FungicideActiveSubstance {
  activeSubstance   ActiveSubstance @relation(fields: [activeSubstanceId], references: [id])
  activeSubstanceId String
  fungicide         Fungicide       @relation(fields: [fungicideId], references: [id])
  fungicideId       String
  quantity          Float

  @@id([activeSubstanceId, fungicideId])
}

model ActiveSubstance {
  id         String                     @id @default(uuid())
  name       String
  herbicides HerbicideActiveSubstance[]
  fungicides FungicideActiveSubstance[]
}

model Granular {
  id               String  @id @default(uuid())
  productId        String  @unique
  product          Product @relation(fields: [productId], references: [id])
  granuleSizeMin   Float
  granuleSizeMax   Float
  sgn              Float
  minCuttingHeight Float
}

model Liquid {
  id              String  @id @default(uuid())
  productId       String  @unique
  product         Product @relation(fields: [productId], references: [id])
  specificGravity Float
  waterRateMin    Float
  waterRateMax    Float
}

model Soluble {
  id           String  @id @default(uuid())
  productId    String  @unique
  product      Product @relation(fields: [productId], references: [id])
  waterRateMin Float
  waterRateMax Float
}

model Manufacturer {
  id       String    @id @default(uuid())
  name     String
  products Product[]
}

model Distributor {
  id       String    @id @default(uuid())
  name     String
  products Product[]
  Item     Item[]
}

model Item {
  id               String             @id @default(uuid())
  product          Product            @relation(fields: [productId], references: [id])
  price            Float
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  distributor      Distributor        @relation(fields: [distributorId], references: [id])
  productId        String
  distributorId    String
  purchaseDate     DateTime
  initialQuantity  Float
  currentQuantity  Float
  ApplicationItems ApplicationItems[]
}

model Application {
  id               String             @id @default(uuid())
  date             DateTime
  operator         String
  sprayer          Sprayer            @relation(fields: [sprayerId], references: [id])
  ApplicationItems ApplicationItems[]
  waterVolume      Float
  temperature      Float
  windSpeed        Float
  observations     String
  sprayerId        String
}

model ApplicationItems {
  application   Application @relation(fields: [applicationId], references: [id])
  applicationId String
  item          Item        @relation(fields: [itemId], references: [id])
  itemId        String
  quantity      Float

  @@id([applicationId, itemId])
}

model Equipment {
  id      String        @id @default(uuid())
  name    String
  type    EquipmentType
  sprayer Sprayer?
}

model Sprayer {
  id            String        @id @default(uuid())
  tankCapacity  Float
  nozzleSpacing Float
  equipmentId   String        @unique
  equipment     Equipment     @relation(fields: [equipmentId], references: [id])
  Application   Application[]
}

enum EquipmentType {
  Sprayer
}

enum ProductType {
  Fertilizer
  WettingAgent
  Herbicide
  Fungicide
  GrowthRegulator
}

enum FormType {
  Granular
  Liquid
  Soluble
}
